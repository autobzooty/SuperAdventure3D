class CustomGameSetup : ZilchComponent
{
  [Property]
  // This space exists to be initialized and then destroyed immediately. It's useful
  // for setting things up, like the input manager, for instance
  var SetupSpaceArchetype : Archetype = Archetype.DefaultSpace;
  [Property]
  var DataSpaceArchetype : Archetype = Archetype.DefaultSpace;
  [Property]
  var MenuSpaceArchetype : Archetype = Archetype.DefaultSpace;
  [Property]
  var DialogueSpaceArchetype : Archetype = Archetype.DefaultSpace;
  [Property]
  // The MainSpace is where the game takes place
  var MainSpaceArchetype : Archetype = Archetype.Space;
  [Property]
  var StartingLevel : Level = Level.Level;
  [Property]
  var ChosenLevel : Level = Level.Level;
  [Property]
  // This level will only be loaded once into the SetupSpace at the very beginning
  // of the game, and then that space will be destroyed
  var SetupLevel : Level = Level.SetupLevel;
  [Property]
  var DialogueLevel : Level;
  [Property]
  var LevelChoice : EditorStartingLevelChoice = EditorStartingLevelChoice.EditorLevel;
  
  var DataSpace : Space;          // persistent data goes here. no level needed, just make the objects
  var MenuSpace : Space;          // menus go here
  var DialogueSpace : Space;      // all dialogue boxes go here
  var MainSpace : Space;          // the game takes place here
  var HudSpace : Space;           // if the game currently needs a hud, it's loaded here, and null otherwise
  
  var LevelToLoad : Level
  {
    get
    {
      if      (this.LevelChoice == EditorStartingLevelChoice.StartingLevel)
        return this.StartingLevel;
      else if (this.LevelChoice == EditorStartingLevelChoice.ChosenLevel)
        return this.ChosenLevel;
      else //  this.LevelChoice == EditorStartingLevelChoice.EditorLevel
        return Zero.Editor.EditLevel;
    }
  }
  
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.GameSession, Events.GameSetup, this.OnGameSetup);
  }
  
  
  function OnGameSetup(event : GameEvent)
  {
    var setupSpace = this.GameSession.CreateNamedSpace("SetupSpace", this.SetupSpaceArchetype);
    setupSpace.LoadLevel(this.SetupLevel);
    
    setupSpace.DispatchEvent(Events.CustomGameSetup, GameSetupEvent());
    
    // but this one must be destroyed, for it is only for setup
    setupSpace.Destroy();
    
    // no level needed
    this.DataSpace = this.GameSession.CreateNamedSpace("DataSpace", this.DataSpaceArchetype);
    
    // TODO:
    // 
    // should this be created here? or should it be like how i'm doing the hud, created and
    // destroyed dynamically as needed? the world may never know
    this.MenuSpace = this.GameSession.CreateNamedSpace("MenuSpace", this.MenuSpaceArchetype);
    
    this.DialogueSpace = this.GameSession.CreateNamedSpace("DialogueSpace", this.DialogueSpaceArchetype);
    this.DialogueSpace.LoadLevel(this.DialogueLevel);
    
    this.MainSpace = this.GameSession.CreateNamedSpace("MainSpace", this.MainSpaceArchetype);
    this.MainSpace.LoadLevel(this.LevelToLoad);
  }
}


enum EditorStartingLevelChoice
{
  StartingLevel,
  ChosenLevel,
  EditorLevel,
}
