///////////////////////////////////////////////////////////////////////////////
///           |
/// AUTHORS   | Doug Zwick
/// COPYRIGHT | (C) 2018 Milky Way Games
///           |
///////////////////////////////////////////////////////////////////////////////

class EquipmentBase : ZilchComponent
{
  [Dependency]
  var IB : ItemBase;
  
  
  [Property]
  var SlotType : EquipmentType = EquipmentType.OneHand;
  [Property]
  var StatBlock : StatBlock = StatBlock();
  [Property]
  var VisibleOnEquip : Boolean = false;
  
  var Equipper : EquipmentInterface;
  var EquippedSlot : EquipmentSlot;
  
  var TypeString : String
  {
    get
    {
      if (this.SlotType == EquipmentType.OneHand)
        return "One-Handed Weapon";
      if (this.SlotType == EquipmentType.Body)
        return "Armor";
      if (this.SlotType == EquipmentType.Head)
        return "Helmet";
      if (this.SlotType == EquipmentType.Glove)
        return "Glove";
      if (this.SlotType == EquipmentType.Foot)
        return "Footwear";
      if (this.SlotType == EquipmentType.Accessory)
        return "Accessory";
      
      return "Unknown Equipment (ERROR)";
    }
  }
  
  
  //****************************************************************************
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Owner, Events.WasEquipped, this.OnWasEquipped);
    Zero.Connect(this.Owner, Events.WasUnequipped, this.OnWasUnequipped);
    Zero.Connect(this.Owner, Events.StatsCalculationRequest, this.OnStatsCalculationRequest);
  }
  
  
  //****************************************************************************
  function OnWasEquipped(event : EquipmentEvent)
  {
    this.EquippedSlot = event.Slot;
    this.Equipper = event.Equipper;
    
    if (this.VisibleOnEquip)
      this.IB.ShowRecursively(this.Owner);
  }
  
  
  //****************************************************************************
  function OnWasUnequipped(event : EquipmentEvent)
  {
    this.EquippedSlot = null;
    this.Equipper = null;
    
    if (this.VisibleOnEquip)
      this.IB.HideRecursively(this.Owner);
  }
  
  
  //****************************************************************************
  function OnStatsCalculationRequest(event : StatsEvent)
  {
    event.StatBlock.Add(this.StatBlock);
  }
  
  
  //****************************************************************************
  function Unequip()
  {
    
  }
}


class StatMod : ZilchObject
{
  [Property]
  var Addend : Real = 0;
  [Property]
  var Bonus : Real = 0;
  
  function Add(rhs : StatMod)
  {
    this.Addend += rhs.Addend;
    this.Bonus  += rhs.Bonus;
  }
}


class StatBlock : ZilchObject
{
  [Property]
  var HP : StatMod = StatMod();
  [Property]
  var Evasion : StatMod = StatMod();
  //[Property]
  //var TypeAddends : TypeMultiplierBlock = TypeMultiplierBlock()
  //{
  //  Heat = 0,
  //  Cold = 0,
  //  Electricity = 0,
  //  Psychic = 0,
  //  Biological = 0,
  //  Poison = 0,
  //  Holy = 0,
  //  Dark = 0,
  //};
  [Property]
  var TypeBonuses : TypeMultiplierBlock = TypeMultiplierBlock()
  {
    Heat = 0,
    Cold = 0,
    Electricity = 0,
    Psychic = 0,
    Biological = 0,
    Poison = 0,
    Holy = 0,
    Dark = 0,
  };
  
  function Add(rhs : StatBlock)
  {
    this.HP.Add(rhs.HP);
    this.Evasion.Add(rhs.Evasion);
    //this.TypeAddends.Add(rhs.TypeAddends);
    this.TypeBonuses.Add(rhs.TypeBonuses);
  }
}
