///////////////////////////////////////////////////////////////////////////////
///           |
/// AUTHORS   | Doug Zwick
/// COPYRIGHT | (C) 2018 Milky Way Games
///           |
///////////////////////////////////////////////////////////////////////////////

class EquipmentInterface : ZilchComponent
{
  [Property]
  var EquipmentRoot = CogPath(".");
  
  //var IM : IM;
  
  
  //****************************************************************************
  function Initialize(init : CogInitializer)
  {
    //this.IM = this.GameSession.IM;
    //Zero.Connect(this.Space, Events.PlayerUpdate, this.OnPlayerUpdate);
    Zero.Connect(this.Owner, Events.RequestEquip, this.OnRequestEquip);
  }
  
  
  //****************************************************************************
  function OnRequestEquip(event : EquipmentEvent)
  {
    
  }
  
  
  //function OnPlayerUpdate(event : UpdateEvent)
  //{
  //  if (this.IM.Triggered(GameAction.Attack))
  //  {
  //    var head : EquipmentSlot = null;
      
  //    foreach (var child in this.EquipmentRoot.Cog.Children)
  //    {
  //      var slot = child.EquipmentSlot;
        
  //      if (slot.SlotType == EquipmentType.Head)
  //      {
  //        head = slot;
  //        break;
  //      }
  //    }
      
  //    if (head.Empty)
  //    {
  //      var ii = this.Owner.InventoryInterface;
  //      var helmet : EquipmentBase = null;
        
  //      foreach (var item in ii.InventoryRoot.Cog.Children)
  //      {
  //        var eb = item.EquipmentBase;
          
  //        if (eb.SlotType == EquipmentType.Head)
  //          helmet = eb;
  //      }
        
  //      if (helmet != null)
  //        this.AttemptEquip(helmet);
  //    }
  //    else
  //    {
  //      this.AttemptUnequip(head);
  //    }
  //  }
  //}
  
  
  //****************************************************************************
  function AttemptEquip(equipment : EquipmentBase)
  {
    var type = equipment.SlotType;
    var slot = this.FindEmptySlot(type);
    
    if (slot == null)
      this.FailToEquip(equipment);
    else
      this.Equip(equipment, slot);
  }
  
  
  //****************************************************************************
  function Equip(equipment : EquipmentBase, slot : EquipmentSlot)
  {
    Print("Equipping `equipment.IB.Name`....");
    
    slot.Equip(equipment);
    
    var ee = EquipmentEvent();
    ee.Equipment = equipment;
    ee.Equipper = this;
    ee.Slot = slot;
    equipment.Owner.DispatchEvent(Events.WasEquipped, ee);
    this.Owner.DispatchEvent(Events.DidEquip, ee);
  }
  
  
  //****************************************************************************
  function AttemptUnequip(slot : EquipmentSlot)
  {
    if (!slot.Empty)
    {
      this.Unequip(slot);
    }
  }
  
  
  //****************************************************************************
  function AttemptUnequip(equipment : EquipmentBase)
  {
    this.AttemptUnequip(equipment.EquippedSlot);
  }
  
  
  //****************************************************************************
  function Unequip(slot : EquipmentSlot)
  {
    var equipment = slot.Equipment;
    
    Print("Unequipping `equipment.IB.Name`....");
    
    slot.Unequip();
    
    var ee = EquipmentEvent();
    ee.Equipment = equipment;
    ee.Equipper = this;
    ee.Slot = slot;
    equipment.Owner.DispatchEvent(Events.WasUnequipped, ee);
    this.Owner.DispatchEvent(Events.DidUnequip, ee);
  }
  
  
  //****************************************************************************
  function FailToEquip(equipment : EquipmentBase)
  {
    
  }
  
  
  //****************************************************************************
  function FindEmptySlot(type : EquipmentType) : EquipmentSlot
  {
    // TODO:
    // 
    // i've got all these swell bools here. what i want to do is
    // make an enum of slot-find statuses (found, no slots, no
    // empties, etc.) and return that, and make the found slot
    // be an output parameter or something... but for now, these
    // will just sit here looking pretty
    
    var childrenWereFound = false;
    var slotsWereFound = false;
    var matchingSlotsWereFound = false;
    var emptyMatchingSlotsWereFound = false;
    
    var slotThatWasFound : EquipmentSlot = null;
    
    foreach (var child in this.EquipmentRoot.Cog.Children)
    {
      childrenWereFound = true;
      
      var slot = child.EquipmentSlot;
      
      if (slot != null)
      {
        slotsWereFound = true;
        
        if (slot.SlotType == type)
        {
          matchingSlotsWereFound = true;
          
          if (slot.Empty)
          {
            emptyMatchingSlotsWereFound = true;
            
            slotThatWasFound = slot;
          }
        }
      }
    }
    
    return slotThatWasFound;
  }
}


class EquipmentSlot : ZilchComponent
{
  [Property]
  var SlotType : EquipmentType;
  
  var Equipment : EquipmentBase = null;
  
  var Empty : Boolean { get { return this.Equipment == null; }}
  
  
  function Equip(equipment : EquipmentBase)
  {
    this.Equipment = equipment;
    equipment.Owner.AttachToPreserveLocal(this.Owner);
    var tf = equipment.Owner.Transform;
    tf.LocalTranslation = Real3.Zero;
    tf.LocalRotation = Quaternion.Identity;
  }
  
  
  function Unequip()
  {
    this.Equipment.Owner.Detach();
    this.Equipment = null;
  }
}


enum EquipmentType
{
  OneHand,
  Head,
  Body,
  Glove,
  Foot,
  Accessory,
  
  COUNT_
}
