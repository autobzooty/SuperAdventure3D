///////////////////////////////////////////////////////////////////////////////
///           |
/// AUTHORS   | Doug Zwick
/// COPYRIGHT | (C) 2018 Milky Way Games
///           |
///////////////////////////////////////////////////////////////////////////////

class GameSetupEvent : ZilchEvent
{
  sends CustomGameSetup : GameSetupEvent;
}

class InputMappingEvent : ZilchEvent
{
  sends InputMappingRequest : InputMappingEvent;
  sends InputMappingSetup : InputMappingEvent;
  
  var Sticks = HashMap[GameStick, Array[StickMapping]]();
  var Actions = HashMap[GameAction, Array[ActionMapping]]();
}

class RelationshipSetupEvent : ZilchEvent
{
  sends RelationshipSetupRequest : RelationshipSetupEvent;
}

class UpdateEventSends
{
  //
  //
  // for IM use only. this is where the Current data is set.
  // it has to happen before everything else so that any
  // polling done in later updates will be accurate
  sends IMUpdate : UpdateEvent;
  
  //
  //
  // the console needs to clear its HasPrintedThisFrame flag
  // before anything has a chance to print to it
  sends ConsoleUpkeep : UpdateEvent;
  //
  //
  // sent to the gamesession. never paused. useful for stuff
  // that should happen before space-specific updates,
  // regardless of what's paused or not
  sends Upkeep : UpdateEvent;
  
  //
  //
  // sent to the main space if it is not paused. used for
  // player input
  sends PlayerUpdate : UpdateEvent;
  //
  //
  // sent to every space if it is not paused. general-purpose
  // update event. use this instead of LogicUpdate, because
  // the relative timing of this event is carefully controlled
  sends StandardUpdate : UpdateEvent;
  //
  //
  // sent to the main space if it is not paused. this is for
  // applying movement vectors and things like that
  sends PhysicsUpdate : UpdateEvent;
  //
  //
  // sent to the main space. comes last of the space updates
  // so that camera movements can be as up-to-date as possible
  sends CameraUpdate : UpdateEvent;
  //
  //
  // sent to the hud space, if it exists. use this for hud
  // stuff that should be pausable. (hud stuff that should
  // not be pausable should be done in GUIUpdate on the
  // gamesession)
  sends HudUpdate : UpdateEvent;
  
  //
  //
  // sent to the gamesession. never paused. any GUI / hud /
  // menu related behavior that should not be paused can go
  // here. (hud stuff that should be pausable should be done
  // in HudUpdate on the hud space, if it exists)
  sends GUIUpdate : UpdateEvent;
  //
  //
  // sent to the gamesession. never paused. useful for
  // anything that should happen after all the space-specific
  // updates have been dispatched
  sends Cleanup : UpdateEvent;
  
  //
  //
  // for IM use only. this is where the Current data becomes
  // the Previous data. must happen at the very end of the
  // frame for the IM to function correctly
  sends IMCleanup : UpdateEvent;
}

class InputEvent : ZilchEvent
{
  sends MovementRequest : InputEvent;
  
  var Direction : Real3;
  var Magnitude : Real;
  var JumpTriggered : Boolean;
  var JumpReleased : Boolean;
  var Dt : Real;
  var ActiveInput : Boolean;
}

//
// Should I Make this New Event an MWEvent?
// a short story by doug, age 35
// 
// the point of the MWEvent class is that it is
// designed to facilitate the Request-Was-Did event
// model. if an event is not likely to use that model,
// then it is not likely to benefit from inheriting
// from MWEvent. furthermore, if it is likely that
// there will be ambiguity about who or what the
// Instigator is (e.g., with a CollectionEvent, who is
// the Instigator? is it the collector? is it the thing
// that dropped the collectable? unclear), then it's
// probably not worth having a thing around called
// "Instigator" that can get in the way of clarity.
// 
// however, if the new event is likely to be used in a
// manner in which it is strongly tied to some faction
// (e.g., damage being dealt by a Bad guy is Bad
// damage), then it may be a good idea to make it
// inherit from MWEvent after all
// 
// the end :)
//
class MWEvent : ZilchEvent
{
  var Instigator : Cog;
  var InstigatingFaction : FactionValue;
  var InstigatorName : String;
  
  constructor() : base() {}
  
  constructor(instigator : Cog) : base()
  {
    this.Instigator = instigator;
    this.InstigatingFaction = Faction.Find(instigator);
    this.InstigatorName = instigator.Name;
  }
  
  constructor(instigatingFaction : FactionValue) : base()
  {
    this.InstigatingFaction = instigatingFaction;
  }
}

class HealthEvent : MWEvent
{
  sends RequestDamage : HealthEvent;
  sends WasDamaged : HealthEvent;
  sends DidDamage : HealthEvent;
  sends RequestHeal : HealthEvent;
  sends WasHealed : HealthEvent;
  sends DidHeal : HealthEvent;
  sends WasDealtCritical : HealthEvent;
  sends DidDealCritical : HealthEvent;
  sends HPDepleted : HealthEvent;
  sends Death : HealthEvent;
  
  // the amount of the HP change. the effects of whether it's a crit are
  // already factored in. this number should always be positive: a
  // positive value in a Damage event indicates a negative HP change,
  // and a positive value in a Heal event indicates a positive HP change
  var Amount : Real;
  // whether this is a crit
  var Critical : Boolean;
  // whether this attack can be evaded
  var Evadable : Boolean;
  // what type this HP change is
  var Type : DamageType = DamageType.None;
  // whether factions should be ignored for this HP change
  var IgnoreFaction : Boolean = false;
  // whether invincibility should be ignored for this HP change
  var IgnoreInvincibility : Boolean = false;
  
  // where this health change occurred, if applicable
  var WorldPoint : Real3;
  // normal of the contact that caused this health change, if applicable
  var ContactNormal : Real3;
  
  // the cog that causes this HP change (e.g., the weapon used by a
  // player, etc.)
  var Deliverer : Cog;
  // the cog that receives this HP change (e.g., the foe struck by a
  // sword, etc.). generally speaking this is the Owner of the
  // Health component that is involved in this interaction
  var Receiver : Cog;
  
  // whether this event has been "intercepted" -- typically useful for
  // death-related stuff
  var Handled : Boolean = false;
  
  // whether death is being prevented for this HP change
  var PreventDeath : Boolean = false;
  
  // TODO:
  // 
  // results
  
  // the inter-faction relationship between the instigator and the
  // receiver
  var Relationship : Relationship
  {
    get
    {
      return Relationship.Get(this.InstigatingFaction, this.Receiver.Faction.AssignedFaction);
    }
  }
}

class EquipmentEvent : MWEvent
{
  sends RequestEquip : EquipmentEvent;
  sends WasEquipped : EquipmentEvent;
  sends DidEquip : EquipmentEvent;
  sends RequestUnequip : EquipmentEvent;
  sends WasUnequipped : EquipmentEvent;
  sends DidUnequip : EquipmentEvent;
  
  // TODO:
  // 
  // i strongly suspect that we'll want to differentiate between when an item is
  // equipped by a player during the game, like through the menu or whatever, and
  // when it is "equipped" on initialize, like when a character with equipment is
  // created or loaded. i think it's mostly going to be a matter of a difference
  // in feedback, but there could be mechanical implications as well, and it
  // would certainly be relevant for data tracking
  
  var Equipment : EquipmentBase;
  var Equipper : EquipmentInterface;
  var Slot : EquipmentSlot;
}

class ItemEvent : MWEvent
{
  sends RequestUse : ItemEvent;
  sends WasUsed : ItemEvent;
  sends DidUse : ItemEvent;
  
  var Item : ItemBase;
  var User : InventoryInterface;
}

class StatsEvent : MWEvent
{
  sends StatsCalculationRequest : StatsEvent;
  
  var StatBlock : StatBlock;
}

class CollectionEvent : ZilchEvent
{
  sends CollectionRequest : CollectionEvent;
  sends WasCollected : CollectionEvent;
  sends DidCollect : CollectionEvent;
  
  var Collector : Collector;
  var Collectee : Collectable;
}

class InventoryMenuEvent : ZilchEvent
{
  sends InventoryMenuSetup : InventoryMenuEvent;
  sends InventoryMenuStartedOpening : InventoryMenuEvent;
  sends InventoryMenuFinishedOpening : InventoryMenuEvent;
  sends InventoryMenuStartedClosing : InventoryMenuEvent;
  sends InventoryMenuFinishedClosing : InventoryMenuEvent;
  
  // 
  // 
  // dispatched to an item card with the information that
  // should be displayed on it
  sends InventoryListItemSetup : InventoryMenuEvent;
  sends InventoryUpdated : InventoryMenuEvent;
  
  var ItemList : Array[ItemBase];
  var ItemBase : ItemBase;
  var InventoryInterface : InventoryInterface;
}
