///////////////////////////////////////////////////////////////////////////////
///           |
/// AUTHORS   | Doug Zwick
/// COPYRIGHT | (C) 2018 Milky Way Games
///           |
///////////////////////////////////////////////////////////////////////////////

class Health : ZilchComponent
{
  [Dependency] var Faction : Faction;
  
  
  [Property]
  var Invincible = false;
  [Property]
  var BaseHP = 10.0;
  [Property][Slider(0, 1, 0.05)]
  var BaseEvasion = 0.0;
  [Property]
  var TypeMultiplierBlock = TypeMultiplierBlock();
  
  var HPMultiplier = 1.0;
  var EvasionMultiplier = 1.0;
  
  var TypeMultipliers = HashMap[DamageType, Real]()
  {
    { DamageType.None, 1 },
  };
  
  var HP : Real;
  var MaxHP : Real;
  var Evasion : Real;
  
  // if true, messages about damage and death will be printed to the console
  var PrintStatusMessages : Boolean = true;
  
  
  //****************************************************************************
  function Initialize(init : CogInitializer)
  {
    this.MaxHP = this.BaseHP;
    this.HP = this.MaxHP;
    this.Evasion = this.BaseEvasion;
    
    this.TypeMultiplierBlock.Apply(this);
    
    Zero.Connect(this.Space, Events.CustomGameSetup, this.OnCustomGameSetup);
    
    // connect for stat events
    Zero.Connect(this.Owner, Events.StatsWereCalculated, this.OnStatsWereCalculated);
    
    // connect for HP change events
    Zero.Connect(this.Owner, Events.RequestDamage, this.OnRequestDamage);
    Zero.Connect(this.Owner, Events.RequestHeal, this.OnRequestHeal);
    Zero.Connect(this.Space, Events.StandardUpdate, this.OnStandardUpdate);
  }
  
  
  //****************************************************************************
  function OnCustomGameSetup(event : GameSetupEvent)
  {
    var he = HealthEvent();
    he.OldHP = 0;
    he.NewHP = this.HP;
    he.MaxHP = this.MaxHP;
    this.Owner.DispatchEvent(Events.HealthSetup, he);
  }
  
  
  //****************************************************************************
  function OnStandardUpdate(event : UpdateEvent)
  {
    if (Zero.Keyboard.KeyIsPressed(Keys.Comma))
    {
      var ctrlHeld = Zero.Keyboard.KeyIsDown(Keys.Control);
      var he = HealthEvent();
      he.Amount = this.MaxHP * 0.2;
      if (ctrlHeld)
        he.Amount = this.MaxHP * 0.7;
      he.IgnoreFaction = true;
      he.IgnoreInvincibility = true;
      he.Receiver = this.Owner;
      he.Critical = ctrlHeld;
      this.Owner.DispatchEvent(Events.RequestDamage, he);
    }
  }
  
  
  //****************************************************************************
  function OnStatsWereCalculated(event : StatsEvent)
  {
    var initialMaxHP = this.MaxHP;
    
    var statBlock = event.StatBlock;
    
    // TODO:
    // 
    // look into this again. i might want to reverse the order of applying
    // addends and bonuses
    this.HPMultiplier = 1 + statBlock.HP.Bonus;
    this.MaxHP = this.BaseHP + statBlock.HP.Addend;
    this.MaxHP *= this.HPMultiplier;
    
    this.EvasionMultiplier = 1 + statBlock.Evasion.Bonus;
    this.Evasion = this.BaseEvasion + statBlock.Evasion.Addend;
    this.Evasion *= this.EvasionMultiplier;
    
    var block = this.TypeMultiplierBlock.Copy();
    block.Add(statBlock.TypeBonuses);
    block.Apply(this);
    
    var finalMaxHP = this.MaxHP;
    
    if (finalMaxHP != initialMaxHP)
    {
      var he = HealthEvent();
      he.OldMaxHP = initialMaxHP;
      he.MaxHP = finalMaxHP;
      he.OldHP = this.HP;
      
      if (this.HP > this.MaxHP)
      {
        this.HP = this.MaxHP;
        this.Owner.DispatchEvent(Events.EquipmentReducedCurrentHP, he);
      }
      
      he.NewHP = this.HP;
      this.Owner.DispatchEvent(Events.EquipmentChangedMaxHP, he);
    }
  }
  
  
  //****************************************************************************
  function OnRequestDamage(event : HealthEvent)
  {
    if (this.Invincible && !event.IgnoreInvincibility)
      return;
    
    var ignoreFaction = event.IgnoreFaction;
    var relationship = event.Relationship;
    var canDealDamage = relationship.CanDealDamage;
    
    if (ignoreFaction || canDealDamage)
    {
      if (this.EvadeRoll())
        this.Evade(event);
      else
        this.TakeDamage(event);
    }
  }
  
  
  //****************************************************************************
  function OnRequestHeal(event : HealthEvent)
  {
    // can this ever fail? if so, check here. for now, just let it through
    this.Heal(event);
  }
  
  
  //****************************************************************************
  function EvadeRoll() : Boolean
  {
    return PRNG.EvadeRoll(this.Evasion);
  }
  
  
  //****************************************************************************
  function Evade(event : HealthEvent)
  {
    // dodge feedback
  }
  
  
  //****************************************************************************
  function TakeDamage(event : HealthEvent)
  {
    // HUGE TODO:
    // 
    // come up with a defense formula
    
    // actually i might have it? no defense, just HP? HP -= damage the end?
    
    // TODO:
    // 
    // we need events for all the different ways that damage can be modified by
    // type multipliers. did you take extra damage because of type weakness?
    // or were you healed? etc. for now, the event's damage will just be
    // multiplied at the top of the function
    
    // TODO:
    // 
    // when damage gets canceled by type multipliers, we shouldn't just return
    // and be done with it, but we also shouldn't proceed through this whole
    // works when it's gonna be 0 damage. instead, there should be an event
    // just for such an occasion. for now we'll just return early, though
    
    var type = event.Type;
    var typeMultiplier = this.TypeMultipliers[type];
    event.Amount *= typeMultiplier;
    
    // TODO:
    // 
    // really, if the amount is negative, then it's because of type affinity,
    // so this should be a heal
    
    // first, we're going to make sure the damage isn't zero (or, for whatever
    // reason, negative), because we don't want to fire off WasDamaged events
    // etc. if there was not actually any damage
    if (event.Amount <= 0.0)
      return;
    
    event.OldHP = this.HP;
    
    this.HP -= event.Amount;
    
    event.NewHP = this.HP;
    event.MaxHP = this.MaxHP;
    
    // we took damage! time to dispatch some events
    this.Owner.DispatchEvent(Events.WasDamaged, event);
    if (event.Instigator != null)
      event.Instigator.DispatchEvent(Events.DidDamage, event);
    if (event.Deliverer != null && event.Deliverer != event.Instigator)
      event.Deliverer.DispatchEvent(Events.DidDamage, event);
    // TODO:
    // 
    // we should have a DidDeliverDamage event that the deliverer gets
    // instead of DidDamage
    
    // TODO:
    // 
    // crits are currently just up to the attacker's crit roll. i should look
    // into whether it might be worthwhile to bring the defender into whether
    // a crit is scored
    
    // note: it may matter whether we dispatch the was/did damage events before
    // or after the was/did deal critical events, but for now, here's wonderwall
    if (event.Critical)
    {
      this.Owner.DispatchEvent(Events.WasDealtCritical, event);
      if (event.Instigator != null)
        event.Instigator.DispatchEvent(Events.DidDealCritical, event);
      // Events.DidDeliverCritical...?
    }
    
    if (this.PrintStatusMessages)
    {
      var message = String.FormatC("%s dealt %.2f damage to %s",
                                   event.InstigatorName,
                                   event.Amount,
                                   this.Owner.Name);
      
      if (event.Critical)
        message = "CRITICAL HIT!! `message`";
      
      Print(message);
    }
    
    // TODO:
    // 
    // we should probably consider values very close to zero to be zero, for
    // floating-point safety -- if i have what looks like 2 hp left, but really
    // it's 2.001 hp, and i take what looks like 2 damage, but really it's
    // 2.0005, i won't be dead but the UI might make things confusing
    
    if (this.HP < 0)
    {
      // should we do anything special at 0 HP exactly (or nearly exactly)?
      
      this.HP = 0;
      this.Owner.DispatchEvent(Events.HPDepleted, event);
      
      if (event.PreventDeath)
      {
        // something
      }
      else
      {
        this.Die(event);
      }
    }
  }
  
  
  //****************************************************************************
  function Heal(event : HealthEvent)
  {
    // check if this amount <= 0, for the same reason as with damage
    if (event.Amount <= 0)
      return;
    
    event.Receiver = this.Owner;
    event.OldHP = this.HP;
    event.MaxHP = this.MaxHP;
    
    this.HP += event.Amount;
    
    if (this.HP >= this.MaxHP)
      this.HPHitMax(event);
    
    event.NewHP = this.HP;
    
    this.Owner.DispatchEvent(Events.WasHealed, event);
    if (event.Instigator != null)
      event.Instigator.DispatchEvent(Events.DidHeal, event);
    // TODO:
    // 
    // do stuff with the deliverer
  }
  
  
  //****************************************************************************
  function Die(event : HealthEvent)
  {
    this.Owner.DispatchEvent(Events.Death, event);
    
    // TODO:
    // 
    // whatever you are, you dispatch an event that says you died
    
    if (this.PrintStatusMessages)
    {
      var message = String.FormatC("%s defeated %s!",
                                   event.InstigatorName,
                                   this.Owner.Name);
      Print(message);
    }
    
    if (!event.Handled)
      this.Owner.Destroy();
  }
  
  
  //****************************************************************************
  function HPHitMax(event : HealthEvent)
  {
    // TODO:
    // 
    // make it so that this function doesn't get called if we already
    // had maxed out HP
    
    // feedback and stuff, maybe an event, for when HP gets topped off
    
    this.HP = this.MaxHP;
  }
}


enum DamageResult
{
  
}

enum HealResult
{
  
}

enum DamageType
{
  None,         // no type -- typical for non-magical / physical attacks
  Heat,         // typically thought of as "fire" in standard rpg canon -- damage by too much molecular vibration?
  Cold,         // typically thought of as "ice" -- damage by too little molecular vibration?
  Electricity,  // typically thought of as "lightning" -- damage by electrical interference
  Psychic,      // damage dealt directly to a mind
  Biological,   // damage caused by microbial infection
  Poison,       // damage caused by chemical interference with biological systems
  Holy,         // damage caused by "good" divine power
  Dark,         // damage caused by "evil" divine power
  
  COUNT_
}

class TypeMultiplierBlock : ZilchObject
{
  [Property] var Heat        = 1.0;
  [Property] var Cold        = 1.0;
  [Property] var Electricity = 1.0;
  [Property] var Psychic     = 1.0;
  [Property] var Biological  = 1.0;
  [Property] var Poison      = 1.0;
  [Property] var Holy        = 1.0;
  [Property] var Dark        = 1.0;
  
  function Apply(health : Health)
  {
    var types = health.TypeMultipliers;
    types[DamageType.Heat]        = this.Heat;
    types[DamageType.Cold]        = this.Cold;
    types[DamageType.Electricity] = this.Electricity;
    types[DamageType.Psychic]     = this.Psychic;
    types[DamageType.Biological]  = this.Biological;
    types[DamageType.Poison]      = this.Poison;
    types[DamageType.Holy]        = this.Holy;
    types[DamageType.Dark]        = this.Dark;
  }
  
  function Add(rhs : TypeMultiplierBlock)
  {
    this.Heat        += rhs.Heat;
    this.Cold        += rhs.Cold;
    this.Electricity += rhs.Electricity;
    this.Psychic     += rhs.Psychic;
    this.Biological  += rhs.Biological;
    this.Poison      += rhs.Poison;
    this.Holy        += rhs.Holy;
    this.Dark        += rhs.Dark;
  }
  
  //function Multiply(rhs : TypeMultiplierBlock)
  //{
  //  this.Heat        *= rhs.Heat;
  //  this.Cold        *= rhs.Cold;
  //  this.Electricity *= rhs.Electricity;
  //  this.Psychic     *= rhs.Psychic;
  //  this.Biological  *= rhs.Biological;
  //  this.Poison      *= rhs.Poison;
  //  this.Holy        *= rhs.Holy;
  //  this.Dark        *= rhs.Dark;
  //}
  
  function Copy() : TypeMultiplierBlock
  {
    var output = TypeMultiplierBlock();
    output.Heat        = this.Heat;
    output.Cold        = this.Cold;
    output.Electricity = this.Electricity;
    output.Psychic     = this.Psychic;
    output.Biological  = this.Biological;
    output.Poison      = this.Poison;
    output.Holy        = this.Holy;
    output.Dark        = this.Dark;
    
    return output;
  }
}
