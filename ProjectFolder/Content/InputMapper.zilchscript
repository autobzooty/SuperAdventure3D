class InputMapper : ZilchComponent
{
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.CustomGameSetup, this.OnCustomGameSetup);
  }
  
  
  function OnCustomGameSetup(event : GameSetupEvent)
  {
    var ime = InputMappingEvent();
    this.Space.DispatchEvent(Events.InputMappingRequest, ime);
    this.GameSession.DispatchEvent(Events.InputMappingSetup, ime);
  }
}


class InputMapping
{
  [Property] var PlayerIndex : Integer;
  var Gamepad_ : Gamepad;
  var Gamepad : Gamepad
  {
    get
    {
      if (this.Gamepad_ == null) this.Gamepad_ = Zero.Gamepads.GetGamePad(this.PlayerIndex);
      
      return this.Gamepad_;
    }
  }
}

class InputMappingSetter : ZilchComponent
{
  [Property] var PlayerIndex = 0;
}


class StickMapping : InputMapping
{
  [Property] var Multiplier : Real2 = Real2.One;
  [Property] var Stick : GameStick = GameStick.Move;
  
  [Virtual] function GetValue() : Real2
  {
    throw Exception("Base StickMapping GetValue function called");
  }
}

class StickMappingSetter : InputMappingSetter
{
  [Property] var Multiplier = Real2(1);
  [Property] var Stick : GameStick = GameStick.Move;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.InputMappingRequest, this.OnInputMappingRequest);
  }
  
  function OnInputMappingRequest(event : InputMappingEvent)
  {
    var mapping = this.GetMapping();
    var stick = mapping.Stick;
    var list = event.Sticks.GetOrDefault(stick, null);
    
    if (list == null)
    {
      list = Array[StickMapping]();
      event.Sticks[stick] = list;
    }
    
    list.Add(mapping);
  }
  
  [Virtual] function GetMapping() : StickMapping
  {
    throw Exception("Base StickMappingSetter GetMapping function called");
  }
}


class KeyboardStickMapping : StickMapping
{
  [Property] var Key : Keys;
  
  [Override] function GetValue() : Real2
  {
    return Zero.Keyboard.KeyIsDown(this.Key) as Real * this.Multiplier;
  }
}

class KeyboardStickMappingSetter : StickMappingSetter
{
  //[Property] var Mapping : KeyboardStickMapping;
  
  [Property] var Key : Keys = Keys.None;
  
  [Override] function GetMapping() : StickMapping
  {
    return KeyboardStickMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Multiplier  = this.Multiplier,
      Stick       = this.Stick,
      Key         = this.Key,
    };
  }
}


class GamepadLeftStickMapping : StickMapping
{
  [Override] function GetValue() : Real2
  {
    return this.Gamepad.LeftStick * this.Multiplier;
  }
}

class GamepadLeftStickMappingSetter : StickMappingSetter
{
  //[Property] var Mapping : GamepadLeftStickMapping;
  
  [Override] function GetMapping() : StickMapping
  {
    return GamepadLeftStickMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Multiplier  = this.Multiplier,
      Stick       = this.Stick,
    };
  }
}


class GamepadRightStickMapping : StickMapping
{
  [Override] function GetValue() : Real2
  {
    return this.Gamepad.RightStick * this.Multiplier;
  }
}

class GamepadRightStickMappingSetter : StickMappingSetter
{
  //[Property] var Mapping : GamepadRightStickMapping;
  
  [Override] function GetMapping() : StickMapping
  {
    return GamepadRightStickMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Multiplier  = this.Multiplier,
      Stick       = this.Stick,
    };
  }
}


class GamepadButtonStickMapping : StickMapping
{
  [Property] var Button : Buttons;
  
  [Override] function GetValue() : Real2
  {
    return this.Gamepad.IsButtonHeld(this.Button) as Real * this.Multiplier;
  }
}

class GamepadButtonStickMappingSetter : StickMappingSetter
{
  //[Property] var Mapping : GamepadButtonStickMapping;
  
  [Property] var Button : Buttons = Buttons.AnyButton;
  
  [Override] function GetMapping() : StickMapping
  {
    return GamepadButtonStickMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Multiplier  = this.Multiplier,
      Stick       = this.Stick,
      Button      = this.Button,
    };
  }
}


class MouseStickMapping : StickMapping
{
  [Override] function GetValue() : Real2
  {
    return Zero.Mouse.RawMovement * this.Multiplier;
  }
}

class MouseStickMappingSetter : StickMappingSetter
{
  //[Property] var Mapping : MouseStickMapping;
  
  [Override] function GetMapping() : StickMapping
  {
    return MouseStickMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Multiplier  = this.Multiplier,
      Stick       = this.Stick,
    };
  }
}


class MouseButtonStickMapping : StickMapping
{
  [Property] var Button : MouseButtons;
  
  [Override] function GetValue() : Real2
  {
    return Zero.Mouse.IsButtonDown(this.Button) as Real * this.Multiplier;
  }
}

class MouseButtonStickMappingSetter : StickMappingSetter
{
  //[Property] var Mapping : MouseButtonStickMapping;
  
  [Property] var Button : MouseButtons = MouseButtons.None;
  
  [Override] function GetMapping() : StickMapping
  {
    return MouseButtonStickMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Multiplier  = this.Multiplier,
      Stick       = this.Stick,
      Button      = this.Button,
    };
  }
}


class ActionMapping : InputMapping
{
  [Property] var Action : GameAction = GameAction.Jump;
  
  [Virtual] function GetDown() : Boolean
  {
    throw Exception("Base ActionMapping GetDown function called");
  }
}

class ActionMappingSetter : InputMappingSetter
{
  [Property] var Action : GameAction = GameAction.Jump;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.InputMappingRequest, this.OnInputMappingRequest);
  }
  
  function OnInputMappingRequest(event : InputMappingEvent)
  {
    var mapping = this.GetMapping();
    var action = mapping.Action;
    var list = event.Actions.GetOrDefault(action, null);
    
    if (list == null)
    {
      list = Array[ActionMapping]();
      event.Actions[action] = list;
    }
    
    list.Add(mapping);
  }
  
  [Virtual] function GetMapping() : ActionMapping
  {
    throw Exception("Base ActionMappingSetter GetMapping function called");
  }
}


class KeyboardActionMapping : ActionMapping
{
  [Property] var Key : Keys;
  
  [Override] function GetDown() : Boolean
  {
    return Zero.Keyboard.KeyIsDown(this.Key);
  }
}

class KeyboardActionMappingSetter : ActionMappingSetter
{
  //[Property] var Mapping : KeyboardActionMapping;
  
  [Property] var Key : Keys = Keys.None;
  
  [Override] function GetMapping() : ActionMapping
  {
    return KeyboardActionMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Action      = this.Action,
      Key         = this.Key,
    };
  }
}


class GamepadActionMapping : ActionMapping
{
  [Property] var Button : Buttons;
  
  [Override] function GetDown() : Boolean
  {
    return this.Gamepad.IsButtonHeld(this.Button);
  }
}

class GamepadActionMappingSetter : ActionMappingSetter
{
  //[Property] var Mapping : GamepadActionMapping;
  
  [Property] var Button : Buttons = Buttons.AnyButton;
  
  [Override] function GetMapping() : ActionMapping
  {
    return GamepadActionMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Action      = this.Action,
      Button      = this.Button,
    };
  }
}


class LeftTriggerActionMapping : ActionMapping
{
  [Property] var Threshold : Real = 0.25;
  
  [Override] function GetDown() : Boolean
  {
    return this.Gamepad.LeftTrigger >= this.Threshold;
  }
}

class LeftTriggerActionMappingSetter : ActionMappingSetter
{
  //[Property] var Mapping : LeftTriggerActionMapping;
  
  [Property] var Threshold = 0.25;
  
  [Override] function GetMapping() : ActionMapping
  {
    return LeftTriggerActionMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Action      = this.Action,
      Threshold   = this.Threshold,
    };
  }
}


class RightTriggerActionMapping : ActionMapping
{
  [Property] var Threshold : Real = 0.25;
  
  [Override] function GetDown() : Boolean
  {
    return this.Gamepad.RightTrigger >= this.Threshold;
  }
}

class RightTriggerActionMappingSetter : ActionMappingSetter
{
  //[Property] var Mapping : RightTriggerActionMapping;
  
  [Property] var Threshold = 0.25;
  
  [Override] function GetMapping() : ActionMapping
  {
    return RightTriggerActionMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Action      = this.Action,
      Threshold   = this.Threshold,
    };
  }
}


class MouseActionMapping : ActionMapping
{
  [Property] var Button : MouseButtons;
  
  [Override] function GetDown() : Boolean
  {
    return Zero.Mouse.IsButtonDown(this.Button);
  }
}

class MouseActionMappingSetter : ActionMappingSetter
{
  //[Property] var Mapping : MouseActionMapping;
  
  [Property] var Button : MouseButtons = MouseButtons.None;
  
  [Override] function GetMapping() : ActionMapping
  {
    return MouseActionMapping()
    {
      PlayerIndex = this.PlayerIndex,
      Action      = this.Action,
      Button      = this.Button,
    };
  }
}
