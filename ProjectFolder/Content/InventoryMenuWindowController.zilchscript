class InventoryMenuWindowController : ZilchComponent
{
  [Dependency]
  var UiWidget : UiWidget;
  
  
  [Property]
  var ListRoot : CogPath = CogPath(".");
  [Property]
  var ItemCardArchetype : Archetype = Archetype.ItemCard;
  [Property]
  var CursorPath : CogPath = CogPath("../Cursor");
  
  var WindowHiddenFlexSizeX : Real = 0;
  var WindowShownFlexSizeX : Real = 1;
  var SpacerHiddenFlexSizeX : Real = 100;
  var SpacerShownFlexSizeX : Real = 1;
  var Duration : Real = 10 / 60.0;
  var Shown : Boolean = false;
  var Transitioning : Boolean = false;
  var WindowSequence : ActionSet;
  
  var IM : IM;
  
  var CanShow : Boolean { get { return !this.Transitioning; }}
  var CanHide : Boolean { get { return !this.Transitioning; }}
  var ZerothCard : UiWidget { get { return this.ListRoot.Cog.Children.Current.UiWidget; }}
  
  
  function Initialize(init : CogInitializer)
  {
    this.IM = this.GameSession.IM;
    
    this.WindowSequence = Action.Sequence(this.Owner.Actions);
    
    this.UiWidget.FlexSize = Real2(this.WindowHiddenFlexSizeX, 1);
    this.UiWidget.Visible = false;
    this.SnapHideCursor();
    
    Zero.Connect(this.GameSession, Events.GUIUpdate, this.OnGUIUpdate);
    Zero.Connect(this.Space, Events.InventoryUpdated, this.OnInventoryUpdated);
  }
  
  
  function OnGUIUpdate(event : UpdateEvent)
  {
    if (this.IM.Triggered(GameAction.Menu))
    {
      if (this.Shown)
        this.AttemptHide();
      else
        this.AttemptShow();
    }
  }
  
  
  function OnInventoryUpdated(event : InventoryMenuEvent)
  {
    foreach (var child in this.ListRoot.Cog.Children)
    {
      child.Destroy();
    }
    
    var list = event.ItemList;
    
    foreach (var itemBase in list)
    {
      var card = this.Space.Create(this.ItemCardArchetype);
      card.AttachToPreserveLocal(this.ListRoot.Cog);
      event.ItemBase = itemBase;
      card.DispatchEvent(Events.InventoryListItemSetup, event);
    }
  }
  
  
  function AttemptShow()
  {
    if (this.CanShow) this.Show();
  }
  
  
  function AttemptHide()
  {
    if (this.CanHide) this.Hide();
  }
  
  
  function Show()
  {
    this.Transitioning = true;
    
    this.GameSession.DispatchEvent(Events.InventoryMenuStartedOpening, InventoryMenuEvent());
    
    this.ShowCursor();
    
    this.WindowSequence.Cancel();
    this.WindowSequence = Action.Sequence(this.Owner.Actions);
      
      Action.Property(this.WindowSequence, @this.UiWidget.Visible, true, 0, Ease.Linear);
      Action.Property(this.WindowSequence, @this.UiWidget.FlexSize,
        Real2(this.WindowShownFlexSizeX, 1), this.Duration, Ease.QuadInOut);
      Action.Event(this.WindowSequence, this.GameSession, Events.InventoryMenuFinishedOpening, InventoryMenuEvent());
      Action.Property(this.WindowSequence, @this.Transitioning, false, 0, Ease.Linear);
      Action.Property(this.WindowSequence, @this.Shown, true, 0, Ease.Linear);
  }
  
  
  function Hide()
  {
    this.Transitioning = true;
    
    this.GameSession.DispatchEvent(Events.InventoryMenuStartedClosing, InventoryMenuEvent());
    
    this.HideCursor();
    
    this.WindowSequence.Cancel();
    this.WindowSequence = Action.Sequence(this.Owner.Actions);
      
      Action.Property(this.WindowSequence, @this.UiWidget.FlexSize,
        Real2(this.WindowHiddenFlexSizeX, 1), this.Duration, Ease.QuadInOut);
      Action.Property(this.WindowSequence, @this.UiWidget.Visible, false, 0, Ease.Linear);
      Action.Property(this.WindowSequence, @this.Transitioning, false, 0, Ease.Linear);
      Action.Property(this.WindowSequence, @this.Shown, false, 0, Ease.Linear);
      Action.Event(this.WindowSequence, this.GameSession, Events.InventoryMenuFinishedClosing, InventoryMenuEvent());
  }
  
  
  function SnapShowCursor()
  {
    this.CursorPath.Transform.LocalScale = Real3.One;
  }
  
  
  function SnapHideCursor()
  {
    this.CursorPath.Transform.LocalScale = Real3.Zero;
  }
  
  
  function ShowCursor()
  {
    this.CursorPath.Cog.Actions.Cancel();
    Action.Property(this.CursorPath.Cog.Actions, @this.CursorPath.Transform.LocalScale, Real3.One, 1, Ease.ElasticOut);
  }
  
  
  function HideCursor()
  {
    this.CursorPath.Cog.Actions.Cancel();
    Action.Property(this.CursorPath.Cog.Actions, @this.CursorPath.Transform.LocalScale, Real3.Zero, 0.25, Ease.BackIn);
  }
}
