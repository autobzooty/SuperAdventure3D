///////////////////////////////////////////////////////////////////////////////
///           |
/// AUTHORS   | Doug Zwick
/// COPYRIGHT | (C) 2018 Milky Way Games
///           |
///////////////////////////////////////////////////////////////////////////////

class LissajousMovement : ZilchComponent
{
  [Property]
  var MoverPath : CogPath = CogPath();
  [Property]
  var Period : Real3 = Real3(1.618034, 2.718282, 3.141593);
  [Property]
  var Min : Real3 = Real3(-1, -1, -1);
  [Property]
  var Max : Real3 = Real3(1, 1, 1);
  [Property]
  var PhaseShift : Real3 = Real3(0, 90, 0); // in degrees
  [Property]
  var InitialT : Real3 = Real3.Zero;
  
  var T : Real3;
  var Mover : Transform;
  
  
  function Initialize(init : CogInitializer)
  {
    this.T = this.InitialT;
    
    this.Mover = this.MoverPath.Transform;
    Zero.Connect(this.Space, Events.StandardUpdate, this.OnStandardUpdate);
  }
  
  
  function OnStandardUpdate(event : UpdateEvent)
  {
    this.T = Math.FMod(this.T + event.Dt.XXX, this.Period);
    var trigInterior = HM[Real].Tau * this.T / this.Period - Math.ToRadians(this.PhaseShift);
    var trigExterior = (Real3.One - Math.Cos(trigInterior)) / 2;
    this.Mover.LocalTranslation = (this.Max - this.Min) * trigExterior + this.Min;
  }
}


class UiLissajousMovement : ZilchComponent
{
  [Property]
  var MoverPath : CogPath = CogPath();
  [Property]
  var Period : Real2 = Real2(1.618034, 2.718282);
  [Property]
  var Min : Real2 = Real2(-8, -8);
  [Property]
  var Max : Real2 = Real2(8, 8);
  [Property]
  var PhaseShift : Real2 = Real2(0, 90);  // in degrees
  [Property]
  var InitialT : Real2 = Real2.Zero;
  
  var T : Real2 = Real2.Zero;
  var Mover : UiWidget;
  
  
  function Initialize(init : CogInitializer)
  {
    this.T = this.InitialT;
    
    this.Mover = this.MoverPath.UiWidget;
    Zero.Connect(this.GameSession, Events.GUIUpdate, this.OnGUIUpdate);
  }
  
  
  function OnGUIUpdate(event : UpdateEvent)
  {
    this.T = Math.FMod(this.T + event.Dt.XX, this.Period);
    var trigInterior = HM[Real].Tau * this.T / this.Period - Math.ToRadians(this.PhaseShift);
    var trigExterior = (Real2.One - Math.Cos(trigInterior)) / 2;
    this.Mover.LocalTranslation = (this.Max - this.Min) * trigExterior + this.Min;
  }
}
