///////////////////////////////////////////////////////////////////////////////
///           |
/// AUTHORS   | Doug Zwick
/// COPYRIGHT | (C) 2018 Milky Way Games
///           |
///////////////////////////////////////////////////////////////////////////////

[RunInEditor]
class SmaaRenderer : ZilchComponent
{
  [Property]
  var EnableSmaa : Boolean = true;
  [Property]
  var EnableDiagonals : Boolean = true;
  // Use depth info to reject possibly false edges.
  [Property]
  var DepthBasedEdges : Boolean = true;
  // Detect more edges with high setting.
  [Property]
  var EdgeDetection : DetectionChance = DetectionChance.Medium;
  // Switch to Edge and Blend Area to debug intermediate textures.
  [Property]
  var TargetTexture : SmaaRenderTargets = SmaaRenderTargets.FinalBlend;
  [Property]
  var ClearColor : Real4 = Real4(0, 0, 0, 1);
  
  
  //***************************************************************************
  function LinearToGamma(event : RenderTasksEvent, inputBuffer : RenderTarget, outputBuffer : RenderTarget)
  {
    var toGamma = LinearToGammaPass();
    toGamma.Texture = inputBuffer.Texture;
    event.AddRenderTaskPostProcess(outputBuffer, toGamma);
  }
  
  
  //***************************************************************************
  function GammaToLinear(event : RenderTasksEvent, inputBuffer : RenderTarget, outputBuffer : RenderTarget)
  {
    var toLinear = GammaToLinearPass();
    toLinear.Texture = inputBuffer.Texture;
    event.AddRenderTaskPostProcess(outputBuffer, toLinear);
  }
  
  
  //***************************************************************************
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Owner, Events.PostProcessRenderUpdate, this.OnPostProcessRenderUpdate);
  }
  
  
  //***************************************************************************
  function OnPostProcessRenderUpdate(event : RenderScheduleEvent)
  {
    if (!this.EnableSmaa) return;
    
    var lightBuffer = event.LightBuffer;
    var depth = event.DepthStencil;
    
    // Sampler settings for filtering edges texture.
    var samplerSettings = SamplerSettings();
    samplerSettings.AddressingX = TextureAddressing.Clamp;
    samplerSettings.AddressingY = TextureAddressing.Clamp;
    samplerSettings.Filtering = TextureFiltering.Bilinear;
    samplerSettings.CompareFunc = TextureCompareFunc.Always;
    samplerSettings.CompareMode = TextureCompareMode.Enabled;
    
    var size = event.ViewportSize;
    var colorCopy = event.Event.GetRenderTarget(size, TextureFormat.RGBA8, samplerSettings);
    var edges = event.Event.GetRenderTarget(size, TextureFormat.RGBA8, samplerSettings);
    var areas = event.Event.GetRenderTarget(size, TextureFormat.RGBA8, samplerSettings);
    var finalBlend = event.Event.GetRenderTarget(size, TextureFormat.RGBA8, samplerSettings);
    
    var renderSettings = RenderSettings() {CullMode = CullMode.Disabled};
    renderSettings.DepthTarget = depth;
    renderSettings.CullMode = CullMode.Disabled;
    renderSettings.DepthSettings.DepthMode = DepthMode.Disabled;
    renderSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.LessEqual;
    
    //Pass uses gamma corrected values and textures. Need input in the same color space.
    this.LinearToGamma(event.Event, lightBuffer, colorCopy);
    
    // First pass, using predicated thresholding here.
    var postProcess = PostEdgeDetection();
      postProcess.DepthTexture = depth.Texture;
      postProcess.DepthBasedThresholding = this.DepthBasedEdges;
    if(this.EdgeDetection == DetectionChance.Medium)
      postProcess.ComparisonThreshold = 0.07;
    else
      postProcess.ComparisonThreshold = 0.05;
    postProcess.Texture = colorCopy.Texture;
    renderSettings.ColorTarget = edges;
    event.Event.AddRenderTaskClearTarget(renderSettings, this.ClearColor, 1.0);
    event.Event.AddRenderTaskPostProcess(renderSettings, postProcess);
    
    // Second pass.
    var areasPostProcess = PostBlendByArea();
    areasPostProcess.DiagEnabled = this.EnableDiagonals;
    if (this.TargetTexture == SmaaRenderTargets.Area)
      areasPostProcess.DebugMode = true;
    areasPostProcess.EdgesTexture = edges.Texture;
    areasPostProcess.SearchTexture = Texture.SearchTex;
    areasPostProcess.AreaTexture = Texture.AreaTex;
    areasPostProcess.SearchSamples = 16.0;
    renderSettings.ColorTarget = areas;
    event.Event.AddRenderTaskClearTarget(renderSettings, this.ClearColor, 1.0);
    event.Event.AddRenderTaskPostProcess(renderSettings, areasPostProcess);
    
    // Final pass.
    var blendPostProcess = PostNeighborhoodBlend();
    blendPostProcess.AreaTexture = areas.Texture;
    blendPostProcess.ColorTexture = colorCopy.Texture;
    renderSettings.ColorTarget = finalBlend;
    event.Event.AddRenderTaskClearTarget(renderSettings, this.ClearColor, 1.0);
    event.Event.AddRenderTaskPostProcess(renderSettings, blendPostProcess);
    
    // Finally, copy to render output.
    var renderPass = CopyTarget();
    
    // Debug options
    if (this.TargetTexture == SmaaRenderTargets.FinalBlend)
      renderPass.Texture = finalBlend.Texture;
    if (this.TargetTexture == SmaaRenderTargets.Area)
      renderPass.Texture = areas.Texture;
    if (this.TargetTexture == SmaaRenderTargets.Edge)
      renderPass.Texture = edges.Texture;
      
    renderSettings.ColorTarget = colorCopy;
    event.Event.AddRenderTaskClearTarget(renderSettings, this.ClearColor, 1.0);
    event.Event.AddRenderTaskPostProcess(renderSettings, renderPass);
    
    // The renderer must be doing a final LinearToGamma pass in Deferred Renderer.
    // Set the values back to linear space for other operations that might come after smaa.
    this.GammaToLinear(event.Event, colorCopy, lightBuffer);
    
    // Release the rendertargets used for SMAA.
    colorCopy.Release();
    edges.Release();
    areas.Release();
    finalBlend.Release();
  }
}


// Settings Enums
enum SmaaRenderTargets
{
  Edge,
  Area,
  FinalBlend,
}

enum DetectionChance
{
  High,
  Medium,
}
