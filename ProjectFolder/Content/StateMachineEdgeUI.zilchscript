///////////////////////////////////////////////////////////////////////////////
///           |
/// AUTHORS   | Doug Zwick
/// COPYRIGHT | (C) 2018 Milky Way Games
///           |
///////////////////////////////////////////////////////////////////////////////


[RunInEditor]
class StateMachineEdgeUi : ZilchComponent
{
  [Static] var Thickness_ : Real = 8;
  [Display] var Thickness : Real
  {
    get { return StateMachineEdgeUi.Thickness_; }
    set { StateMachineEdgeUi.Thickness_ = value; }
  }
  [Static] var HeadWidth_ : Real = 12;
  [Display] var HeadWidth : Real
  {
    get { return StateMachineEdgeUi.HeadWidth_; }
    set { StateMachineEdgeUi.HeadWidth_ = value; }
  }
  
  
  [Dependency]
  var Transform : Transform;
  [Dependency]
  var UiWidget : UiWidget;
  
  
  [Property]
  var FromPath : CogPath = CogPath();
  [Property]
  var ToPath : CogPath = CogPath();
  [Property]
  var ShaftPath : CogPath = CogPath();
  [Property]
  var HeadPath : CogPath = CogPath();
  
  
  var FromWidget : UiWidget;
  var ToWidget : UiWidget;
  var ShaftWidget : UiWidget;
  var HeadWidget : UiWidget;
  var InitialShaftSize : Real2;
  var InitialHeadSize : Real2;
  
  
  //***************************************************************************
  function Initialize(init : CogInitializer)
  {
    this.FromWidget = this.FromPath.UiWidget;
    this.ToWidget = this.ToPath.UiWidget;
    this.ShaftWidget = this.ShaftPath.UiWidget;
    this.HeadWidget = this.HeadPath.UiWidget;
    
    this.InitialShaftSize = this.ShaftWidget.Size;
    this.InitialHeadSize = this.HeadWidget.Size;
  }
  
  
  //***************************************************************************
  function ResetSizes()
  {
    this.ShaftWidget.Size = this.InitialShaftSize;
    this.HeadWidget.Size = this.InitialHeadSize;
  }
  
  
  //***************************************************************************
  function PutInPosition()
  {
    if (this.FromWidget == null || this.ToWidget == null)
      return;
    
    var fromPos = this.FromWidget.WorldCenter;
    var toPos = this.ToWidget.WorldCenter;
    var difference = toPos - fromPos;
    var direction = Math.Normalize(difference);
    var angle = Math.Angle2D(Real3(direction, 0));
    
    var fromRadius = this.FromWidget.Size.X / 2;
    var toRadius = this.ToWidget.Size.X / 2;
    var fromPadding = -8.0;
    var toPadding = -10.0;
    
    var arrowBasePos = fromPos + direction * (fromRadius + fromPadding);
    var arrowTipPos = toPos - direction * (toRadius + toPadding);
    var arrowVector = arrowTipPos - arrowBasePos;
    var arrowLength = Math.Length(arrowVector);
    
    this.Transform.SetEulerAnglesXYZ(0, 0, angle);
    this.UiWidget.WorldCenterLeft = arrowBasePos;
    var arrowSize = this.UiWidget.Size;
    arrowSize.X = arrowLength;
    this.UiWidget.Size = arrowSize;
    var shaftSize = this.ShaftWidget.Size;
    shaftSize.Y = this.Thickness;
    this.ShaftWidget.Size = shaftSize;
    var headSize = this.HeadWidget.Size;
    headSize.Y = this.HeadWidth;
    this.HeadWidget.Size = headSize;
  }
}
